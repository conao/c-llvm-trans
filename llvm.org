#+title: Transrate C to LLVM
#+author: Naoya Yamashita
#+export_file_name: llvm

#+name: clang
#+header: :var filename="test" olevel=0 :exports none :cache yes :results raw drawer
#+begin_src emacs-lisp
  (let* ((dir "src/")
         (c-filepath (format "%s%s.c" dir filename))
         (ll-filepath (format "%s%s.ll" dir filename)))
    (shell-command (format "clang -c -S -emit-llvm -O%d %s -o %s" olevel c-filepath ll-filepath))
    (format "%s\n\n%s"
            (format "#+begin_src C -n\n%s#+end_src" (f-read-text c-filepath))
            (format "#+begin_src llvm -n\n%s#+end_src" (f-read-text ll-filepath))))
#+end_src

* Return value
#+call: clang("01_return", 3)

#+RESULTS[ab5491bb9dce1e650ab80d7370778bf4f42167a2]:
:RESULTS:
#+begin_src C -n
int main() {
    return 42;
}
#+end_src

#+begin_src llvm -n
define i32 @main() {
  ret i32 42
}
#+end_src
:END:

* Variables
#+call: clang("02_variables")

#+RESULTS[f25d259f225f45e0a9baf8b0fb6cd88ea572db4f]:
:RESULTS:
#+begin_src C -n
int main() {
    char c;
    int i;
    long l;
}
#+end_src

#+begin_src llvm -n
define i32 @main() {
  %1 = alloca i8, align 1
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  ret i32 0
}
#+end_src
:END:

* Assign Value
#+call: clang("03_assign-value")

#+RESULTS[0560ecb8172bc3ef91b47e7e1faf5d0bbd8b778f]:
:RESULTS:
#+begin_src C -n
int main() {
    char c;
    int i;
    long l;
    
    c = 'a';
    i = 72;
    l = 123456789012345;
}
#+end_src

#+begin_src llvm -n
; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
  %1 = alloca i8, align 1
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  store i8 97, i8* %1, align 1
  store i32 72, i32* %2, align 4
  store i64 123456789012345, i64* %3, align 8
  ret i32 0
}
#+end_src
:END:

* Swap Values
#+call: clang("04_swap-values")

#+RESULTS[a375516a8e0797ee3dc67eacab0774f69f62ff03]:
:RESULTS:
#+begin_src C -n
int main() {
    char a, b;
    a = 32;
    b = a;
}
#+end_src

#+begin_src llvm -n
define i32 @main() #0 {
  %1 = alloca i8, align 1
  %2 = alloca i8, align 1
  store i8 32, i8* %1, align 1
  %3 = load i8, i8* %1, align 1
  store i8 %3, i8* %2, align 1
  ret i32 0
}
#+end_src
:END:

* Calc Values
#+call: clang("05_calc")

#+RESULTS[394aafd3be9760bd51564504af399429d88c86cd]:
:RESULTS:
#+begin_src C -n
int main() {
    int a, b, c;
    a = 32;
    b = a + 24;
    c = b - a;
}
#+end_src

#+begin_src llvm -n
define i32 @main() #0 {
  ; int a, b, c
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4

  ; a = 32;
  store i32 32, i32* %1, align 4

  ; b = a + 24
  %4 = load i32, i32* %1, align 4
  %5 = add nsw i32 %4, 24
  store i32 %5, i32* %2, align 4

  ; c = b - a
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %1, align 4
  %8 = sub nsw i32 %6, %7
  store i32 %8, i32* %3, align 4

  ret i32 0
}
#+end_src
:END:

* Printf
#+call: clang("06_printf")

#+RESULTS[f88effa3299ad41b793ce0219d72f6bc4f820fd9]:
:RESULTS:
#+begin_src C -n
#include <stdio.h>

int main() {
    printf("Hello, world!\n");
}
#+end_src

#+begin_src llvm -n
@.str = private unnamed_addr constant [15 x i8] c"Hello, world!\0A\00", align 1

define i32 @main() {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8*, ...) #1
#+end_src
:END:

* Alloc
#+call: clang("07_alloc")

#+RESULTS[c04e866a237d567113028ef48fde9a42bd810738]:
:RESULTS:
#+begin_src C -n
#include <stdlib.h>

int main() {
  char* data = (char*)calloc(30000, sizeof(char));
  char* ptr = data;
  free(data);
}
#+end_src

#+begin_src llvm -n
define i32 @main() {
  ;; char* data;
  ;; char* ptr;
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8

  ;; data = (char*)calloc(30000, sizeof(char));
  %3 = call i8* @calloc(i64 30000, i64 1)
  store i8* %3, i8** %1, align 8

  ;; ptr = data;
  %4 = load i8*, i8** %1, align 8
  store i8* %4, i8** %2, align 8

  ;; free(data);
  %5 = load i8*, i8** %1, align 8
  call void @free(i8* %5)
  ret i32 0
}

declare i8* @calloc(i64, i64) #1
declare void @free(i8*) #1
#+end_src
:END:

* Loop
** For
#+call: clang("08_for", 1)

:RESULTS:
#+begin_src C -n
int main () {
    int i, j;

    j = 0;
    for (i = 0; i < 10; i++) {
        j++;
    }
}
#+end_src

#+begin_src llvm -n
define i32 @main() {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %2, align 4
  br label %4

; <label>:4                                       ; preds = %10, %0
  %5 = load i32, i32* %2, align 4
  %6 = icmp slt i32 %5, 10
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %4
  %8 = load i32, i32* %3, align 4
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %3, align 4
  br label %10

; <label>:10                                      ; preds = %7
  %11 = load i32, i32* %2, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %2, align 4
  br label %4

; <label>:13                                      ; preds = %4
  %14 = load i32, i32* %1, align 4
  ret i32 %14
}
#+end_src
:END:
** While
#+call: clang("09_while")

#+RESULTS[275a04363e80f1725dc9f4d82b91bcaea257bce7]:
:RESULTS:
#+begin_src C -n
int main () {
    int i;

    i = 0;
    while (i < 10) {
        i++;
    }
}
#+end_src

#+begin_src llvm -n
define i32 @main() {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  br label %3

; <label>:3                                       ; preds = %6, %0
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 10
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %3
  %7 = load i32, i32* %2, align 4
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %2, align 4
  br label %3

; <label>:9                                       ; preds = %3
  %10 = load i32, i32* %1, align 4
  ret i32 %10
}
#+end_src
:END:
